Program start:
  Display user menu
    - Create new schedule
    - view schedule
    - rules/file formatting
 If User does create new schedule
  Ask user for the number of teams competeting ??
  Ask user for the number of parks being used??
  Ask user for name of the file being inputed
    // name of folder containing the team names, their preferences and park location
  Store the name as a variable and use that variable to open the file
  Loop 1
    Read the file
    Create a variable and store the team name
    Create a variable and store the team parameters <-- one variable per parameter ?? <-- use array ??
    Create an object with parameters for team name and parameters
    Store object in an array that is the length of the number of teams
  Loop 1
    This loops for the number of teams
    If there is less teams than user inputted
      number of teams visible is different then number of teams said there would be remove the remaining empty spots from the array. 
      Tell the user that there is an error and say that there is actual # of team
    If there is more
      Increase array of teams <-- have the program look for the number of [] in the program
      Tell the user that there is more than the said number of team and the actual number of teams is #. 
  Loop 2
    Create an array that is as long as the number of parks being used 
    Insert a team name into each slot of the array
  Loop 2
    If there is two many 
      Increase the array length by the number of parks <-- search the number of [] ?? 
        //problem is that [] is also used for teams so there will always be too many
      Tell user that is more parks than said and that the new number of parks are #
    If there is two little 
      Delete extra/blank spots in array
      Tell user that there is too little parks entered and the number of parks are #
  Create variable and store the number of games that will be played that season
  Create a variable and store the start date of the game <-- string
  Create a variable and store the end date of the game <-- string
  
  Loop 3 <-- loops for the number of matches  
  Call randomizatiton class
    //with the parameters of Array of Teams, Array of parks, number of games, 
  Loop 4 <-- randomizing opponents 
    //for loop
    Check
      See if x is already taken
        array of taken that is a boolean and length of the number of teams, when team is taken, whether random num genererator or the for loop it will set the slot of that team to be true
        Continues <-- as that team is alread assigned
    Generate a random number
    Check
      See if team[randNum] is already taken
        array of taken that is a boolean and length of the number of teams, when team is taken, whether random num genererator or the for loop it will set the slot of that team to be true
      see if randNum = x
      Repeats if check is failled
    Set opponent of team[x] be team[randNum]
    Check
       see if team[x] has already played team[randNum]
       if it is
          repeats if it fails
            set taken[randNum] to be false
  Loop 4
    //ends when all of taken is true
    
    
  call function to select park
  create 2d array[a][b] to hold park preferences
    //a <-- number of parks, b <-- max number of team
  loop 5 assigning values to park preference
    c =0; <-- variable to hold the number of times called/number of teams have prefernce for
    loop 6 //checking for team preferences
      if team[y] has preferences for park[x]
        park[x][c]
        c++;
      else do nothing
    loop 6//loop number of teams
  loop 5 //loop the number of parks
  loop 7 <-- assigning team preferenced choices for all mathces
    loop 8 <-- assigning which team gets preferenced choice for one time (ex at 6 or at 7)
      randomize who gets the prefernce for that park
      remove that team from all preference list 
      have array for if park is selected (ex parkSelect[a][b]) and set it to true
        //a is number of parks, b is 2 for the two times
        create a temp preference list as it may reset later (if it loses its preference) ???
    loop 8 //loop for number of parks
  loop 7 //loop twice for there is two times the matches are playing
  loop 9 <-- determine if opponents both have prefernces
    if both teams have gotten preferences
      ranomly select one of the teams
      remove the prefernce for the losing team/unselected team
      set both teams as that park
      recall the prefence choices method/reselect a team for that park out of prefences
        //make method to do prefence choice for single park ??
        // make it so that the method to d
    if one team have gotten prefernces
      set both teams as that park
    if none
      do nothing
  loop 9 //loop for number of parks 
  loop 10//check to see if any parks don't have a team
    if park has open slot
      randomly select a team that does not have a park assigned
    else
      do nothing
  loop 10//loop for the number of parks 
    //check preferences

  //randomizing Time function
  2d array[a][b] for time preferences
    // a <-- number of parks, b <-- 20 cause there is a max of 20 teams
  loop 11 <-- setting prefences
    loop 12 <-- for loop
       check to see if team[x] is equal to time[y]
       add it to the array of time preferences
        //x is variable in loop 12 for loop (team)
        //y is the variable in loop 11 (time)
    loop 12 //loop for number of teams
  loop 11 // loop for number of times (twice)
  
  loop 13  <-- setting time 
    randomly select one pair for 6pm game
    set the other pair for the 7 pm game
  loop 13 <-- loop for the number of parks
  ^ Normal game non preference stuff ^
  
  
  loop 13 <-- setting the preference time for teams
    have temp array for preferences
    store the different preferences for times for the different teams who are playing at park[x] 
    have array or 2 different variables to deteremine/store preference time of match
    2d array, [a][b]
      a <-- is the number of matches (2) ,  b <-- the two teams (2)    
    loop 14 <-- determine which team gets their preference per match (only 2 teams per match) 
      if both b have preferences that are not the same
       randomly select the which one gets it
        set match preference a to be that time
      if both b have same preference 
       set both
        set match preference a to be that time
      check to see time prefernces for team
      if neither have preference 
       set it to 0       
    loop 14 //loop twice for the number of matches
      
    // v actually setting team for matches  v
    if match preference 0 and match preference 1 is the same
      randomly select one team to get the time
      set the other team to be the non pref time
      if both match preference are 0
        randomly select time for one match
        set on selected/used time for the other match 
    if match preference 0 and match preference 1 is different
      if match preference 0 or match preference 1 is equal to 0 
        set the time of the match preference that is 0 to be the other time (non pref time of other match)
      else 
        do nothing, they both get their pref time                
  loop 13 //loop number of park
  
  //storing information 
  Save park location to array of matches (see future ideas)
  Save opponent to array of matches (see future ideas)
  Save game time to array of matches (see future ideas)
  loop 3
  
  create a new file that stores all the match information (what teams are facing eachother, time of match, location of match)
    // store the park location array of matches
    // save opponent to array of matches
    // save game time to array of matches 
    // save start and end date of matches  
  
  //displaying the matches to the user
  ask if format they want it sisplayed in
  ask for the file name (where info stored)
    //have in drop box ??? 
  read information from the file 
  
  //displaying it as a calender
  if they say calender
    NEED MORE RESEARCH
    display calender
    calculate the date for each match
    place word game day on date
    when click date display table on new window
    See GUI formats
    
    
  //displaying as a table  
  if they say table
    loop 15  //displaying the results 
      display title(match number at top center)
      display date
        take start date and add 7 times the match number
      2 rows: with different time of matches
      number of columns is the number of parks: which display the number of parks
      display the two teams facing eachother in corresponding time and park box/interesection
      see table GUI format for example
    loop 15 //loop number of matches
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ASK USER FOR NAME OF SCHEDULE ??
  HAVE PROGRAM STORE MULTIPLE SCHEDULES ??
  HAVE A SEARCH FUNCTION FOR EACH TEAM AND DISPLAY TIME OF GAME, LOCATION OF GAME, AND OPPONENT ??
  
  Should do preferences first ??? before deciding team, location and time ???
  ADD AN OPTION FOR A DOUBLE PLAY OR AN INSTANT WIN FOR TEAM BY SELF (ODD NUMBER OF TEAMS)
    
    
File format
  - team names separated by / ??
  - team preferences separated by /
  - all of one team info is together
  - park name are separated by / 
  - [] used to divide information 
  - {} used to contain one team info ??
  
  ex:
  {
    [/The Beavers/] <-- team name
    [/Panda Park/Gatineau Park/]  <-- preferences
  }
    
    
